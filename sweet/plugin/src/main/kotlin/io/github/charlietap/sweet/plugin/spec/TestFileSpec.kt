package io.github.charlietap.sweet.plugin.spec

import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import io.github.charlietap.sweet.lib.SemanticPhase
import io.github.charlietap.sweet.plugin.ext.backtrackCollectingDirectoriesUntil
import io.github.charlietap.sweet.plugin.ext.snakeCaseToPascalCase
import java.io.File

fun testFileSpec(
    phaseSupport: SemanticPhase,
    testPackage: String,
    runner: String,
    script: File,
    test: File,
): FileSpec {

    val scriptClassName = ClassName("io.github.charlietap.sweet.lib", "Script")
    val scriptResultClassName = ClassName("io.github.charlietap.sweet.lib", "ScriptResult")
    val semanticPhaseClassName = ClassName("io.github.charlietap.sweet.lib", "SemanticPhase")
    val jsonClassName = ClassName("kotlinx.serialization.json", "Json")
    val testAnnotation = ClassName("kotlin.test", "Test")
    val assertEqualsFunction = ClassName("kotlin.test", "assertEquals")

    val testName = test.nameWithoutExtension.snakeCaseToPascalCase()
    val testClassName = if(test.path.contains("proposal")) {
        val directories = test.backtrackCollectingDirectoriesUntil { file ->
            file.parentFile.name == "proposal"
        }
        val subPackage = "proposal." + directories.asReversed().joinToString(".")
        val modifiedTestPackage = "$testPackage.$subPackage"
        ClassName(modifiedTestPackage, testName)
    } else {
        val modifiedTestPackage = testPackage + "." + test.parentFile.name
        ClassName(modifiedTestPackage, testName)
    }

    return testFileSpec(
        phaseSupport,
        runner,
        script,
        test,
        scriptClassName,
        scriptResultClassName,
        semanticPhaseClassName,
        jsonClassName,
        testAnnotation,
        assertEqualsFunction,
        testClassName,
    )
}

private fun testFileSpec(
    phaseSupport: SemanticPhase,
    runner: String,
    script: File,
    test: File,
    scriptClassName: ClassName,
    scriptResultClassName: ClassName,
    semanticPhaseClassName: ClassName,
    jsonClassName: ClassName,
    testAnnotation: ClassName,
    assertEqualsFunction: ClassName,
    testClassName: ClassName,
) = FileSpec.builder(testClassName.packageName, test.nameWithoutExtension).apply {
    indent("    ")
    addFileComment("Code generated by the wasm testsuite plugin. Do not edit this file.")
    addType(
        TypeSpec.classBuilder(testClassName)
            .addAnnotation(
                AnnotationSpec.builder(Suppress::class)
                .addMember("%S", "RedundantVisibilityModifier")
                .build()
            )
            .addProperty(
                PropertySpec.builder("runner", ClassName(runner.substringBeforeLast("."), runner.substringAfterLast(".")))
                    .initializer(runner.substringAfterLast(".") + "()")
                    .addModifiers(KModifier.PRIVATE)
                    .build()
            )
            .addFunction(
                FunSpec.builder("script ${script.name.replace(".", " ")} passes successfully")
                    .addAnnotation(testAnnotation)
                    .addCode(
                        """
                    val file = runner.readFile(TEST_DIR + "${script.name}")
                    val script = %T.decodeFromString<%T>(file)
                    val result = runner.execute(TEST_DIR, script, %T.${phaseSupport.name})

                    %T(%T.Success, result)
                    """.trimIndent(),
                        jsonClassName, scriptClassName, semanticPhaseClassName, assertEqualsFunction, scriptResultClassName
                    )
                    .build()
            )
            .addType(
                TypeSpec.companionObjectBuilder()
                    .addProperty(
                        PropertySpec.builder("TEST_DIR", String::class)
                            .addModifiers(KModifier.CONST)
                            .initializer("%S", script.parentFile.absolutePath + "/")
                            .build()
                    )
                    .build()
            )
            .build()
    )
}.build()
