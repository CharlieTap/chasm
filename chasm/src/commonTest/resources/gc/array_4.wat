(module
  (type $bvec (array i8))
  (type $vec (array (ref $bvec)))
  (type $mvec (array (mut (ref $bvec))))
  (type $nvec (array (ref null $bvec)))
  (type $avec (array (mut anyref)))

  (elem $e (ref $bvec)
    (array.new $bvec (i32.const 7) (i32.const 3))
    (array.new_fixed $bvec 2 (i32.const 1) (i32.const 2))
  )

  (func $new (export "new") (result (ref $vec))
    (array.new_elem $vec $e (i32.const 0) (i32.const 2))
  )

  (func $sub1 (result (ref $nvec))
    (array.new_elem $nvec $e (i32.const 0) (i32.const 2))
  )
  (func $sub2 (result (ref $avec))
    (array.new_elem $avec $e (i32.const 0) (i32.const 2))
  )

  (func $get (param $i i32) (param $j i32) (param $v (ref $vec)) (result i32)
    (array.get_u $bvec (array.get $vec (local.get $v) (local.get $i)) (local.get $j))
  )
  (func (export "get") (param $i i32) (param $j i32) (result i32)
    (call $get (local.get $i) (local.get $j) (call $new))
  )

  (func $set_get (param $i i32) (param $j i32) (param $v (ref $mvec)) (param $y i32) (result i32)
    (array.set $mvec (local.get $v) (local.get $i) (array.get $mvec (local.get $v) (local.get $y)))
    (array.get_u $bvec (array.get $mvec (local.get $v) (local.get $i)) (local.get $j))
  )
  (func (export "set_get") (param $i i32) (param $j i32) (param $y i32) (result i32)
    (call $set_get (local.get $i) (local.get $j)
      (array.new_elem $mvec $e (i32.const 0) (i32.const 2))
      (local.get $y)
    )
  )

  (func $len (param $v (ref array)) (result i32)
    (array.len (local.get $v))
  )
  (func (export "len") (result i32)
    (call $len (call $new))
  )
)
